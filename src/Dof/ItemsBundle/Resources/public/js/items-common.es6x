/** @jsx JSXDOM */

var itemsFeatureKey = (function () {
	var allScripts = document.getElementsByTagName("script");
	var thisScript = allScripts[allScripts.length - 1];
	var tsUrl = thisScript.getAttribute('src');
	var hashPos = tsUrl.indexOf('#');
	if (hashPos >= 0)
		return tsUrl.substring(hashPos + 1);
	return 'items';
})();

class Characteristic {
	constructor(key, name, defaultWeight, defaultColor) {
		this.key = key;
		this.name = name;
		this.defaultWeight = defaultWeight;
		this.defaultColor = defaultColor;
		this.visible = false;
		if ('localStorage' in window) {
			this.weight = parseInt(localStorage.getItem('dof/' + itemsFeatureKey + '/chara/' + key + '/weight'), 10);
			if (this.weight != this.weight)
				this.weight = this.defaultWeight;
			this.color = parseInt(localStorage.getItem('dof/' + itemsFeatureKey + '/chara/' + key + '/color'), 10);
			if (this.color != this.color)
				this.color = this.defaultColor;
			this.disabled = parseBoolean(localStorage.getItem('dof/' + itemsFeatureKey + '/chara/' + key + '/disabled'));
		} else {
			this.weight = defaultWeight;
			this.color = defaultColor;
			this.disabled = false;
		}
	}
	setWeight(weight) {
		this.weight = weight;
		if ('localStorage' in window) {
			if (weight != this.defaultWeight)
				localStorage.setItem('dof/' + itemsFeatureKey + '/chara/' + this.key + '/weight', weight.toString(10));
			else
				localStorage.removeItem('dof/' + itemsFeatureKey + '/chara/' + this.key + '/weight');
		}
	}
	setColor(color) {
		this.color = color;
		if ('localStorage' in window) {
			if (color != this.defaultColor)
				localStorage.setItem('dof/' + itemsFeatureKey + '/chara/' + this.key + '/color', color.toString(10));
			else
				localStorage.removeItem('dof/' + itemsFeatureKey + '/chara/' + this.key + '/color');
		}
	}
	setDisabled(disabled) {
		this.disabled = disabled;
		if ('localStorage' in window) {
			if (disabled)
				localStorage.setItem('dof/' + itemsFeatureKey + '/chara/' + this.key + '/disabled', 'true');
			else
				localStorage.removeItem('dof/' + itemsFeatureKey + '/chara/' + this.key + '/disabled');
		}
	}
	reset() {
		this.setWeight(this.defaultWeight);
		this.setColor(this.defaultColor);
		this.setDisabled(false);
	}
}

var characteristics = [
	new Characteristic('vitality', Translator.trans('vitality', {}, 'item'), 0.25, 0xFF1E1E),
	new Characteristic('strength', Translator.trans('strength', {}, 'strenght'), 1, 0x815633),
	new Characteristic('intelligence', Translator.trans('intelligence', {}, 'item'), 1, 0xD13800),
	new Characteristic('chance', Translator.trans('chance', {}, 'item'), 1, 0x398A89),
	new Characteristic('agility', Translator.trans('agility', {}, 'item'), 1, 0x2B6F2D),
	new Characteristic('wisdom', Translator.trans('wisdom', {}, 'item'), 3, 0x330066),
	new Characteristic('power', Translator.trans('power', {}, 'item'), 2, 0),
	new Characteristic('criticalHits', Translator.trans('criticalHits', {}, 'item'), 30, 0),
	new Characteristic('ap', Translator.trans('ap', {}, 'item'), 100, 0xECA90E),
	new Characteristic('mp', Translator.trans('mp', {}, 'item'), 90, 0x99CC00),
	new Characteristic('range', Translator.trans('range', {}, 'item'), 51, 0x26B58D),
	new Characteristic('summons', Translator.trans('summons', {}, 'item'), 30, 0xFD890B),
	new Characteristic('damage', Translator.trans('damage', {}, 'item'), 20, 0),
	new Characteristic('neutralDamage', Translator.trans('neutralDamage', {}, 'item'), 5, 0x000000),
	new Characteristic('earthDamage', Translator.trans('earthDamage', {}, 'item'), 5, 0x815633),
	new Characteristic('fireDamage', Translator.trans('fireDamage', {}, 'item'), 5, 0xD13800),
	new Characteristic('waterDamage', Translator.trans('waterDamage', {}, 'item'), 5, 0x398A89),
	new Characteristic('airDamage', Translator.trans('airDamage', {}, 'item'), 5, 0x2B6F2D),
	new Characteristic('heals', Translator.trans('heals', {}, 'item'), 20, 0xFF1E1E),
	new Characteristic('prospecting', Translator.trans('prospecting', {}, 'item'), 3, 0x0098FF),
	new Characteristic('initiative', Translator.trans('initiative', {}, 'item'), 0.1, 0x660066),
	new Characteristic('reflectedDamage', Translator.trans('reflectedDamage', {}, 'item'), 30, 0),
	new Characteristic('percentNeutralResistance', Translator.trans('percentNeutralResistance', {}, 'item'), 6, 0x000000),
	new Characteristic('percentEarthResistance', Translator.trans('percentEarthResistance', {}, 'item'), 6, 0x815633),
	new Characteristic('percentFireResistance', Translator.trans('percentFireResistance', {}, 'item'), 6, 0xD13800),
	new Characteristic('percentWaterResistance', Translator.trans('percentWaterResistance', {}, 'item'), 6, 0x398A89),
	new Characteristic('percentAirResistance', Translator.trans('percentAirResistance', {}, 'item'), 6, 0x2B6F2D),
	new Characteristic('neutralResistance', Translator.trans('neutralResistance', {}, 'item'), 2, 0x000000),
	new Characteristic('earthResistance', Translator.trans('earthResistance', {}, 'item'), 2, 0x815633),
	new Characteristic('fireResistance', Translator.trans('fireResistance', {}, 'item'), 2, 0xD13800),
	new Characteristic('waterResistance', Translator.trans('waterResistance', {}, 'item'), 2, 0x398A89),
	new Characteristic('airResistance', Translator.trans('airResistance', {}, 'item'), 2, 0x2B6F2D),
	new Characteristic('percentNeutralResistanceInPvp', Translator.trans('percentNeutralResistanceInPvp', {}, 'item'), 6, 0x000000),
	new Characteristic('percentEarthResistanceInPvp', Translator.trans('percentEarthResistanceInPvp', {}, 'item'), 6, 0x815633),
	new Characteristic('percentFireResistanceInPvp', Translator.trans('percentFireResistanceInPvp', {}, 'item'), 6, 0xD13800),
	new Characteristic('percentWaterResistanceInPvp', Translator.trans('percentWaterResistanceInPvp', {}, 'item'), 6, 0x398A89),
	new Characteristic('percentAirResistanceInPvp', Translator.trans('percentAirResistanceInPvp', {}, 'item'), 6, 0x2B6F2D),
	new Characteristic('neutralResistanceInPvp', Translator.trans('neutralResistanceInPvp', {}, 'item'), 2, 0x000000),
	new Characteristic('earthResistanceInPvp', Translator.trans('earthResistanceInPvp', {}, 'item'), 2, 0x815633),
	new Characteristic('fireResistanceInPvp', Translator.trans('fireResistanceInPvp', {}, 'item'), 2, 0xD13800),
	new Characteristic('waterResistanceInPvp', Translator.trans('waterResistanceInPvp', {}, 'item'), 2, 0x398A89),
	new Characteristic('airResistanceInPvp', Translator.trans('airResistanceInPvp', {}, 'item'), 2, 0x2B6F2D),
	new Characteristic('lock', Translator.trans('lock', {}, 'item'), 4, 0xB3CB20),
	new Characteristic('dodge', Translator.trans('dodge', {}, 'item'), 4, 0xB3CB20),
	new Characteristic('apReduction', Translator.trans('apReduction', {}, 'item'), 7, 0xECA90E),
	new Characteristic('mpReduction', Translator.trans('mpReduction', {}, 'item'), 7, 0x99CC00),
	new Characteristic('apLossResistance', Translator.trans('apLossResistance', {}, 'item'), 7, 0xECA90E),
	new Characteristic('mpLossResistance', Translator.trans('mpLossResistance', {}, 'item'), 7, 0x99CC00),
	new Characteristic('criticalDamage', Translator.trans('criticalDamage', {}, 'item'), 5, 0),
	new Characteristic('criticalResistance', Translator.trans('criticalResistance', {}, 'item'), 2, 0),
	new Characteristic('pushbackDamage', Translator.trans('pushbackDamage', {}, 'item'), 5, 0),
	new Characteristic('pushbackResistance', Translator.trans('pushbackResistance', {}, 'item'), 2, 0),
	new Characteristic('trapPower', Translator.trans('trapPower', {}, 'item'), 2, 0),
	new Characteristic('trapDamage', Translator.trans('trapDamage', {}, 'item'), 15, 0)
];
var characteristicsByKey = { };
characteristics.forEach(function (chara) {
	characteristicsByKey[chara.key] = chara;
});

var defaultQualityFactor = 0.85;
if ('localStorage' in window) {
	defaultQualityFactor = parseFloat(localStorage.getItem('dof/prefs/defaultQualityFactor', 'true'));
	if (defaultQualityFactor != defaultQualityFactor)
		defaultQualityFactor = 0.85;
}
