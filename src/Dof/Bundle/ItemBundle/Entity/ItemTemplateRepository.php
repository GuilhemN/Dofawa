<?php

namespace Dof\Bundle\ItemBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * ItemTemplateRepository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ItemTemplateRepository extends EntityRepository
{
    /**
     * Count all items.
     *
     * @return int
     */
    public function countTotal()
    {
        return $this->createQueryBuilder('a')
            ->select('COUNT(a)')
            ->getQuery()
            ->getSingleScalarResult();
    }

    public function findOptions(array $options = array(), array $orders = array(), $limit = null, $offset = null)
    {
        $qb = $this->findOptionsQuery($options, $orders);

        return $qb
            ->getQuery()
            ->setFirstResult($offset)
            ->setMaxResults($limit)
            ->getResult();
    }

    public function countWithOptions($options = array())
    {
        $qb = $this->findOptionsQuery($options);
        $qb->select(['COUNT(i)']);

        return $qb
            ->getQuery()
            ->getSingleScalarResult();
    }

    protected function findOptionsQuery(array $options = array(), array $orders = array())
    {
        $qb = $this->createQueryBuilder('i');
        $qb
            ->andWhere('i.deprecated = false')
            ->andWhere('i.visible = true');

        if (!empty($options['name'])) {
            $qb
                ->andWhere('i.name LIKE :name')
                ->setParameter('name', '%'.$options['name'].'%');
        }
        if (!empty($options['tradeable'])) {
            $qb
                ->andWhere('i.tradeable LIKE :tradeable')
                ->setParameter('tradeable', $options['tradeable']);
        }

        if(!empty($options['sort'])) {
            $sort = $options['sort'];
            if($sort == 'priceDate' && isset($options['server'])) {
                $qb
                    ->leftJoin('i.trades', 't')
                    ->innerJoin('t.server', 's', 'WITH', 's.slug = :server')
                    ->addOrderBy('t.createdAt', 'DESC')
                    ->setParameter('server', $options['server']);
            } elseif ($sort == '-priceDate') {
                $qb
                    ->leftJoin('i.trades', 't')
                    ->innerJoin('t.server', 's', 'WITH', 's.slug = :server')
                    ->addOrderBy('t.createdAt', 'ASC')
                    ->setParameter('server', $options['server']);;
            }
        }

        foreach ($orders as $column => $order) {
            $qb->addOrderBy('i.'.$column, $order);
        }

        $qb->addOrderBy('i.level', 'DESC');

        return $qb;
    }
}
